class InputController { constructor() { this.keys = { forward: false, backward: false, left: false, right: false, jump: false, sprint: false, reload: false, }; this.mouse = { x: 0, y: 0, leftButton: false, rightButton: false }; this.setupListeners(); } setupListeners() { // Keyboard events document.addEventListener("keydown", (event) => this.onKeyDown(event)); document.addEventListener("keyup", (event) => this.onKeyUp(event)); // Mouse events document.addEventListener("mousemove", (event) => this.onMouseMove(event)); document.addEventListener("mousedown", (event) => this.onMouseDown(event)); document.addEventListener("mouseup", (event) => this.onMouseUp(event)); } onKeyDown(event) { switch(event.code) { case "KeyW": this.keys.forward = true; break; case "KeyS": this.keys.backward = true; break; case "KeyA": this.keys.left = true; break; case "KeyD": this.keys.right = true; break; case "Space": this.keys.jump = true; break; case "ShiftLeft": this.keys.sprint = true; break; case "KeyR": this.keys.reload = true; break; } } onKeyUp(event) { switch(event.code) { case "KeyW": this.keys.forward = false; break; case "KeyS": this.keys.backward = false; break; case "KeyA": this.keys.left = false; break; case "KeyD": this.keys.right = false; break; case "Space": this.keys.jump = false; break; case "ShiftLeft": this.keys.sprint = false; break; case "KeyR": this.keys.reload = false; break; } } onMouseMove(event) { this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1; this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1; } onMouseDown(event) { if (event.button === 0) this.mouse.leftButton = true; if (event.button === 2) this.mouse.rightButton = true; } onMouseUp(event) { if (event.button === 0) this.mouse.leftButton = false; if (event.button === 2) this.mouse.rightButton = false; } } export default InputController;
