import * as THREE from "three"; class ProceduralLevel { constructor(size = 50) { this.size = size; this.buildingCount = 20; this.buildings = []; this.group = new THREE.Group(); } generate() { // Clear previous level if (this.group.children.length > 0) { while (this.group.children.length) { const object = this.group.children[0]; object.geometry?.dispose(); object.material?.dispose(); this.group.remove(object); } } // Create a ground plane const ground = new THREE.Mesh( new THREE.PlaneGeometry(this.size, this.size), new THREE.MeshToonMaterial({ color: 0x888888 }) ); ground.rotation.x = -Math.PI / 2; ground.receiveShadow = true; this.group.add(ground); // Generate random buildings for (let i = 0; i < this.buildingCount; i++) { this.addRandomBuilding(); } return this.group; } addRandomBuilding() { const width = 2 + Math.random() * 5; const depth = 2 + Math.random() * 5; const height = 3 + Math.random() * 10; const geometry = new THREE.BoxGeometry(width, height, depth); const material = new THREE.MeshToonMaterial({ color: Math.random() * 0xffffff }); const building = new THREE.Mesh(geometry, material); building.position.x = (Math.random() - 0.5) * this.size * 0.8; building.position.z = (Math.random() - 0.5) * this.size * 0.8; building.position.y = height / 2; building.castShadow = true; building.receiveShadow = true; this.buildings.push(building); this.group.add(building); } } export default ProceduralLevel;
